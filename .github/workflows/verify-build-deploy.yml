name: Verify Build

on:
  push:
    branches: [main, develop,feature/*]
    paths:
      - 'src/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (production only for main)'
        required: true
        default: 'dev'
        type: choice
        options: ['dev','staging', 'production']

jobs:
  verify:
    name: Verify branch
    runs-on: ubuntu-latest
    steps:
      - name: ‚úÖ Verify repository origin
        run: |
          echo "üîç Checking repository: ${{ github.repository }}"
          if [ "${{ github.repository }}" = "FC-JAVA-TEAM/portfolio-builder" ]; then
            echo "‚úÖ Verified correct repository"
            exit 0
          else
            echo "::error::‚ùå Incorrect repository"
            exit 1
          fi

  build-maven:
    name: üî® Build with Maven
    runs-on: ubuntu-latest
    needs: ['verify']
    outputs:
      validated_environment: ${{ steps.validate-env.outputs.environment }}
      app_version: ${{ steps.version.outputs.app_version || steps.snapshot-version.outputs.app_version }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: üß± Build Project
        run: |
          echo "üîß Running Maven build"
          mvn -B clean package -DskipTests=true
          echo "‚úÖ Build complete"

      - name: üß™ Validate Environment
        id: validate-env
        run: |
          echo "üîç Branch: ${{ github.ref_name }}"
          echo "üì• Input Environment: ${{ github.event.inputs.environment }}"
          if [ "${{ github.ref_name }}" != "main" ] && [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "::error::‚ùå Production deployment requires main branch"
            exit 1
          fi
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          echo "‚úÖ Validated environment: $ENVIRONMENT"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

      - name: üî¢ Generate Release Version
        if: github.ref == 'refs/heads/main'
        id: version
        run: |
          echo "üè∑Ô∏è Generating release version"
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "üìå Latest tag: $LATEST_TAG"
          NEW_VERSION=$(echo $LATEST_TAG | awk -F. '{printf "v%d.%d.%d", $1, $2, $3+1}')
          echo "üìå New version: $NEW_VERSION"
          echo "app_version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT

      - name: üî¢ Generate Snapshot Version
        if: github.ref != 'refs/heads/main'
        id: snapshot-version
        run: |
          echo "üîß Generating snapshot version"
          SHORT_SHA=$(git rev-parse --short HEAD)
          SNAPSHOT_VERSION="0.0.0-$SHORT_SHA"
          echo "üìå Snapshot version: $SNAPSHOT_VERSION"
          echo "app_version=$SNAPSHOT_VERSION" >> $GITHUB_OUTPUT

  build-docker:
    name: üê≥ Docker Build & Push
    needs: build-maven
    permissions:
      contents: write
      packages: write
    uses: ./.github/workflows/docker-build-push-main.yml
    with:
      image_name: 'koodo-product'
      dockerhub_username: shaikh79
      environment: ${{ needs.build-maven.outputs.validated_environment }}
      app_version: ${{ needs.build-maven.outputs.app_version }}
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy-cloud-run:
    name: üöÄ Deploy to Cloud Run
    needs: [build-docker, build-maven]
    uses: ./.github/workflows/deploy.yml
    with:
      app_version: ${{ needs.build-maven.outputs.app_version }}
      image_name: 'koodo-product'
      environment: ${{ needs.build-maven.outputs.validated_environment }}
      image_tag: ${{ needs.build-docker.outputs.image_tag }}
    secrets:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
