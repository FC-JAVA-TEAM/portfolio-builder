{
	"info": {
		"_postman_id": "enhanced-promote-api-testing-uuid",
		"name": "Enhanced Promote API Testing Collection",
		"description": "Comprehensive collection for testing ALL /promote API scenarios including edge cases, error conditions, and business logic validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup - Health Check",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health endpoint is working\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.eql('pong');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/health/ping",
							"host": ["{{baseUrl}}"],
							"path": ["api", "health", "ping"]
						}
					}
				}
			]
		},
		{
			"name": "Setup - User Registration",
			"item": [
				{
					"name": "Register Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin registration successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"adminToken\", jsonData.accessToken);",
									"    pm.environment.set(\"adminRefreshToken\", jsonData.refreshToken);",
									"    pm.environment.set(\"adminUserId\", jsonData.id);",
									"    console.log(\"Admin registered with ID: \" + jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"firstName\": \"Admin\",\n    \"lastName\": \"User\",\n    \"role\": \"ADMIN\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "register"]
						}
					}
				},
				{
					"name": "Register Test User 1 (For HR Promotion)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"testUser1Token\", jsonData.accessToken);",
									"    pm.environment.set(\"testUser1Id\", jsonData.id);",
									"    pm.environment.set(\"testUser1Email\", \"testuser1@example.com\");",
									"    console.log(\"Test User 1 registered with ID: \" + jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser1@example.com\",\n    \"password\": \"password123\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User1\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "register"]
						}
					}
				},
				{
					"name": "Register Test User 2 (For Finance Promotion)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"testUser2Token\", jsonData.accessToken);",
									"    pm.environment.set(\"testUser2Id\", jsonData.id);",
									"    pm.environment.set(\"testUser2Email\", \"testuser2@example.com\");",
									"    console.log(\"Test User 2 registered with ID: \" + jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser2@example.com\",\n    \"password\": \"password123\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User2\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "register"]
						}
					}
				},
				{
					"name": "Register Test User 3 (No Profile - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"testUser3Token\", jsonData.accessToken);",
									"    pm.environment.set(\"testUser3Id\", jsonData.id);",
									"    pm.environment.set(\"testUser3Email\", \"testuser3@example.com\");",
									"    console.log(\"Test User 3 registered with ID: \" + jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser3@example.com\",\n    \"password\": \"password123\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User3\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "register"]
						}
					}
				},
				{
					"name": "Register Regular User (Non-Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"regularUserToken\", jsonData.accessToken);",
									"    pm.environment.set(\"regularUserId\", jsonData.id);",
									"    pm.environment.set(\"regularUserEmail\", \"regular@example.com\");",
									"    console.log(\"Regular User registered with ID: \" + jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"regular@example.com\",\n    \"password\": \"password123\",\n    \"firstName\": \"Regular\",\n    \"lastName\": \"User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "register"]
						}
					}
				}
			]
		},
		{
			"name": "Setup - Create Profiles",
			"item": [
				{
					"name": "Create Profile for Test User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"testUser1ProfileId\", jsonData.id);",
									"    console.log(\"Profile created for Test User 1: \" + jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{testUser1Token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User 1 Profile\",\n    \"bio\": \"Profile for promotion testing\",\n    \"isPublic\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/profiles",
							"host": ["{{baseUrl}}"],
							"path": ["api", "profiles"]
						}
					}
				},
				{
					"name": "Create Profile for Test User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"testUser2ProfileId\", jsonData.id);",
									"    console.log(\"Profile created for Test User 2: \" + jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{testUser2Token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User 2 Profile\",\n    \"bio\": \"Profile for promotion testing\",\n    \"isPublic\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/profiles",
							"host": ["{{baseUrl}}"],
							"path": ["api", "profiles"]
						}
					}
				}
			]
		},
		{
			"name": "Promote API - Success Scenarios",
			"item": [
				{
					"name": "Promote User to HR (New Endpoint)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"User promoted to HR role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.promotedUser.roles).to.include('ROLE_HR');",
									"});",
									"",
									"pm.test(\"Response contains promotion details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('promotedBy');",
									"    pm.expect(jsonData).to.have.property('promotionTimestamp');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{testUser1Email}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/hr/promote",
							"host": ["{{baseUrl}}"],
							"path": ["api", "hr", "promote"]
						}
					}
				},
				{
					"name": "Promote User to Finance (New Flexible Endpoint)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User promoted to Finance role\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.promotedUser.roles).to.include('ROLE_FINANCE');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{testUser2Email}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/finance/promote",
							"host": ["{{baseUrl}}"],
							"path": ["api", "finance", "promote"]
						}
					}
				}
			]
		},
		{
			"name": "Promote API - Error Scenarios",
			"item": [
				{
					"name": "Promote Non-Existent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 500]);",
									"});",
									"",
									"pm.test(\"Error message contains user not found\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"nonexistent@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/hr/promote",
							"host": ["{{baseUrl}}"],
							"path": ["api", "hr", "promote"]
						}
					}
				},
				{
					"name": "Promote User Without Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									"",
									"pm.test(\"Error message about profile requirement\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('profile');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{testUser3Email}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/hr/promote",
							"host": ["{{baseUrl}}"],
							"path": ["api", "hr", "promote"]
						}
					}
				},
				{
					"name": "Promote User to Invalid Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									"",
									"pm.test(\"Error message about invalid role\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('invalid');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{testUser1Email}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/manager/promote",
							"host": ["{{baseUrl}}"],
							"path": ["api", "manager", "promote"]
						}
					}
				},
				{
					"name": "Unauthorized Promotion (Non-Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{regularUserToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{testUser1Email}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/hr/promote",
							"host": ["{{baseUrl}}"],
							"path": ["api", "hr", "promote"]
						}
					}
				}
			]
		}
	]
}
